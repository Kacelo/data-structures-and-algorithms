{"ast":null,"code":"import theme from '../config/theme';\nimport { getCanvasHeightFromTreeHeight, getMaxLeafNodesFromHeight, getRequiredAndActualHeightAndWidth } from '../utils/tree';\nimport connectPointsWithBezierCurve from '../utils/connectPointsWithBezierCurve';\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\n\nfunction recursivelyDrawNodes(root, canvasComponent, currentLine, horizontalConfig) {\n  // X Calculation\n  const {\n    xStart,\n    xEnd\n  } = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2; // Y Calculation\n\n  const yPosition = currentLine * theme.lineHeight; // Draw the node\n\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent); // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine + 1, {\n      xStart,\n      xEnd: xPosition\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine + 1, {\n      xStart: xPosition,\n      xEnd\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius\n    });\n  }\n}\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\n\n\nfunction drawSimpleBinaryTree(root, canvasComponent, options) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {\n    maxHeight,\n    maxWidth\n  } = options; // Max height and width requirements\n\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth\n  } = getRequiredAndActualHeightAndWidth(maxNumberOfLeafNodes, heightOfTree, maxWidth, maxHeight); // Init calculation\n\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = midPointInCanvas - maxCanvasWidthRequired / 2 + theme.leafNodeSpace;\n  const xEnd = midPointInCanvas + maxCanvasWidthRequired / 2 - theme.leafNodeSpace; // Initialize the canvas\n\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth); // Recursively draw the tree\n\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {\n    xStart,\n    xEnd\n  });\n}\n\nexport default drawSimpleBinaryTree;","map":{"version":3,"mappings":"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","names":["theme","getCanvasHeightFromTreeHeight","getMaxLeafNodesFromHeight","getRequiredAndActualHeightAndWidth","connectPointsWithBezierCurve","recursivelyDrawNodes","root","canvasComponent","currentLine","horizontalConfig","xStart","xEnd","xPosition","yPosition","lineHeight","nodeCircle","setCoordinates","draw","left","yStart","radius","yEnd","right","drawSimpleBinaryTree","options","heightOfTree","getHeight","maxNumberOfLeafNodes","maxHeight","maxWidth","maxCanvasWidthRequired","actualMaxHeight","actualMaxWidth","midPointInCanvas","leafNodeSpace","setMaxWidthAndHeight"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/canvas/drawSimpleBinaryTree.ts"],"sourcesContent":["import CanvasComponent from './Canvas';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport theme from '../config/theme';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getMaxLeafNodesFromHeight,\n  getRequiredAndActualHeightAndWidth,\n} from '../utils/tree';\nimport {\n  HorizontalStartAndEndInput,\n  IndividualInputOptions,\n} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    currentLine: number,\n    horizontalConfig: HorizontalStartAndEndInput,\n) {\n  // X Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2;\n\n  // Y Calculation\n  const yPosition = currentLine * theme.lineHeight;\n\n  // Draw the node\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n\n  // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine+1, {\n      xStart,\n      xEnd: xPosition,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine+1, {\n      xStart: xPosition,\n      xEnd,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawSimpleBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {maxHeight, maxWidth} = options;\n\n  // Max height and width requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNumberOfLeafNodes,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2) +\n  theme.leafNodeSpace;\n  const xEnd = (midPointInCanvas + maxCanvasWidthRequired / 2) -\n  theme.leafNodeSpace;\n\n  // Initialize the canvas\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  // Recursively draw the tree\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {xStart, xEnd});\n}\n\nexport default drawSimpleBinaryTree;\n"]},"metadata":{},"sourceType":"module"}