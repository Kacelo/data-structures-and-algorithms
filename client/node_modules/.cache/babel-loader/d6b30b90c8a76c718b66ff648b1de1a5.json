{"ast":null,"code":"import theme from '../config/theme';\n/**\n * Rate at which circle will grow or shrink\n */\n\nconst growthRate = 0.3;\n/**\n * Describes a circle in the canvas\n */\n\nclass Circle {\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(value, radius, colorSettings) {\n    /**\n     * The colorId of the circle\n     */\n    this.colorId = '';\n    /**\n     * X Position of the circle\n     */\n\n    this.x = -1;\n    /**\n     * Y Position of the circle\n     */\n\n    this.y = -1;\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes\n    };\n  }\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n\n\n  drawCircle(ctx, radius, color) {\n    const {\n      x,\n      y\n    } = this;\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n\n\n  drawBorder(ctx) {\n    const {\n      x,\n      y,\n      colorSettings,\n      radiusSettings: {\n        currentRadius: radius\n      }\n    } = this;\n    const {\n      borderColor\n    } = colorSettings;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n\n\n  writeText(ctx) {\n    const {\n      x,\n      y,\n      value,\n      colorSettings\n    } = this;\n    const {\n      borderColor\n    } = colorSettings; // Decide font size\n\n    const fontSize = `${theme.fontSize}pt`;\n    const ySpacing = theme.fontSize / 2;\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n\n\n  getRadius() {\n    const {\n      radiusSettings: {\n        currentRadius: radius\n      }\n    } = this;\n    return radius;\n  }\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n\n\n  grow() {\n    let maxRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.radiusSettings.maxRadius;\n    const {\n      radiusSettings: {\n        currentRadius\n      }\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ? maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n\n\n  shrink() {\n    let minRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.radiusSettings.minRadius;\n    const {\n      radiusSettings: {\n        currentRadius\n      }\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ? minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n\n\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius\n      }\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n\n\n  setColorId(colorId) {\n    this.colorId = colorId;\n  }\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n\n\n  setCoordinates(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n\n\n  draw(comp) {\n    const {\n      radiusSettings: {\n        currentRadius: radius\n      },\n      colorSettings: {\n        bgColor\n      }\n    } = this; // Draw circle\n\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(comp.getContext(), radius, bgColor);\n    this.drawCircle(comp.getHitContext(), radius, this.colorId); // Draw border\n\n    this.drawBorder(comp.getContext()); // Write text\n\n    this.writeText(comp.getContext()); // Return the colorId\n\n    return this.colorId;\n  }\n\n}\n\nexport default Circle;","map":{"version":3,"mappings":"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","names":["theme","growthRate","Circle","constructor","value","radius","colorSettings","radiusSettings","currentRadius","originalRadius","maxRadius","growthAndShrinkTimes","minRadius","drawCircle","ctx","color","x","y","beginPath","fillStyle","arc","Math","PI","fill","drawBorder","borderColor","strokeStyle","stroke","writeText","fontSize","ySpacing","font","textFont","textAlign","fillText","getRadius","grow","originalIncreasedRadius","shrink","originalDecreasedRadius","restoreCircle","setColorId","colorId","setCoordinates","draw","comp","bgColor","getNextColor","getContext","getHitContext"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/shapes/Circle.ts"],"sourcesContent":["import {CanvasComponent} from '..';\nimport theme from '../config/theme';\nimport {CircleColorSettings} from '../config/types';\nimport {RadiusSettings} from './types';\n\n/**\n * Rate at which circle will grow or shrink\n */\nconst growthRate = 0.3;\n\n/**\n * Describes a circle in the canvas\n */\nclass Circle {\n  /**\n   * Radius of the circle\n   */\n  private radiusSettings: RadiusSettings\n\n  /**\n   * The colorId of the circle\n   */\n  private colorId: string = ''\n\n  /**\n   * Color of the circle\n   */\n  private colorSettings: CircleColorSettings\n\n  /**\n   * Value to be displayed inside the circle\n   */\n  private value: string\n\n  /**\n   * X Position of the circle\n   */\n  private x: number = -1\n\n  /**\n   * Y Position of the circle\n   */\n  private y: number = -1\n\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(\n      value: string,\n      radius: number,\n      colorSettings: CircleColorSettings,\n  ) {\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes,\n    };\n  }\n\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n  private drawCircle(\n      ctx: CanvasRenderingContext2D,\n      radius: number,\n      color: string,\n  ) {\n    const {x, y} = this;\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private drawBorder(ctx: CanvasRenderingContext2D) {\n    const {x, y, colorSettings, radiusSettings: {currentRadius: radius}} = this;\n    const {borderColor} = colorSettings;\n\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private writeText(ctx: CanvasRenderingContext2D) {\n    const {x, y, value, colorSettings} = this;\n    const {borderColor} = colorSettings;\n\n    // Decide font size\n    const fontSize = `${theme.fontSize}pt`;\n    const ySpacing = theme.fontSize/2;\n\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n  getRadius() {\n    const {\n      radiusSettings: {currentRadius: radius},\n    } = this;\n    return radius;\n  }\n\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n  grow(maxRadius = this.radiusSettings.maxRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ?\n      maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n  shrink(minRadius = this.radiusSettings.minRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ?\n      minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius,\n      },\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n  setColorId(colorId: string) {\n    this.colorId = colorId;\n  }\n\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  setCoordinates(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n  draw(comp: CanvasComponent) {\n    const {\n      radiusSettings: {currentRadius: radius},\n      colorSettings: {bgColor},\n    } = this;\n\n    // Draw circle\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(\n        comp.getContext(),\n        radius,\n        bgColor,\n    );\n    this.drawCircle(\n        comp.getHitContext(),\n        radius,\n        this.colorId,\n    );\n\n    // Draw border\n    this.drawBorder(comp.getContext());\n\n    // Write text\n    this.writeText(comp.getContext());\n\n    // Return the colorId\n    return this.colorId;\n  }\n}\n\nexport default Circle;\n"]},"metadata":{},"sourceType":"module"}