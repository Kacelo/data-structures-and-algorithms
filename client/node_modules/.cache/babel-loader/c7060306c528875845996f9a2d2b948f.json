{"ast":null,"code":"import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\n/**\n * Defines one canvas\n */\n\nclass CanvasComponent {\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el) {\n    /**\n     * The current hovering color\n     */\n    this.currentHoveringColor = '';\n    const $hitEl = document.createElement('canvas');\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n  /**\n   * Clears the canvas\n   */\n\n\n  clearCanvas() {\n    const {\n      height,\n      width\n    } = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n\n\n  setMaxWidthAndHeight(height, width) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n\n\n  getHitContext() {\n    const ctx = this.$hitEl.getContext('2d');\n\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n\n\n  getContext() {\n    const ctx = this.$el.getContext('2d');\n\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n\n\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n\n\n  onHover(cb) {\n    // Clear previous listeners\n    if (this.onHoverCB) {\n      this.$el.removeEventListener('mousemove', this.onHoverCB);\n    } // Set the callback\n\n\n    this.onHoverCB = event => {\n      const {\n        pageX,\n        pageY\n      } = event;\n      const {\n        data: pixel\n      } = this.getHitContext().getImageData(pageX - this.$el.offsetLeft, pageY - this.$el.offsetTop, 1, 1); // Callback should only be called on color change\n\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    }; // Add the event listener\n\n\n    this.$el.addEventListener('mousemove', this.onHoverCB);\n  }\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n\n\n  onClick(cb) {\n    // Clear previous listeners\n    if (this.onClickCB) {\n      this.$el.removeEventListener('click', this.onClickCB);\n    } // Set the callback\n\n\n    this.onClickCB = event => {\n      const {\n        pageX,\n        pageY\n      } = event;\n      console.log(pageX, pageY);\n      const {\n        data: pixel\n      } = this.getHitContext().getImageData(pageX - this.$el.offsetLeft, pageY - this.$el.offsetTop, 1, 1);\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    }; // Add the event listener\n\n\n    this.$el.addEventListener('click', this.onClickCB);\n  }\n\n}\n\nexport default CanvasComponent;","map":{"version":3,"mappings":"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","names":["ColorGenerator","getRGBString","CanvasComponent","constructor","$el","$hitEl","document","createElement","colorGenerator","clearCanvas","height","width","getContext","clearRect","setMaxWidthAndHeight","getHitContext","ctx","Error","getNextColor","onHover","cb","onHoverCB","removeEventListener","event","pageX","pageY","data","pixel","getImageData","offsetLeft","offsetTop","color","currentHoveringColor","addEventListener","onClick","onClickCB","console","log"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/canvas/Canvas.ts"],"sourcesContent":["import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\nimport {GetColorCallBack} from './types';\n\n/**\n * Defines one canvas\n */\nclass CanvasComponent {\n  /**\n   * The canvas element\n   */\n  private $el: HTMLCanvasElement\n\n  /**\n   * This is a hidden canvas element\n   * which is used to redraw all the elements from the canvas\n   * in unique colors.\n   *\n   * This way an element can be easily identified from this hit canvas\n   * just by using the color in O(1)\n   *\n   * Otherwise to identify an element in the canvas it will take O(n)\n   *\n   */\n  private $hitEl: HTMLCanvasElement\n\n  /**\n   * The color generator for generating new color\n   */\n  private colorGenerator: ColorGenerator\n\n  /**\n   * The current hovering color\n   */\n  private currentHoveringColor: string = ''\n\n  /**\n   * For storing the on hover callback\n   */\n  private onHoverCB?: (event: MouseEvent) => void\n\n  /**\n   * For storing the on click callback\n   */\n  private onClickCB?: (event: MouseEvent) => void\n\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el: HTMLCanvasElement) {\n    const $hitEl = document.createElement('canvas');\n\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n\n  /**\n   * Clears the canvas\n   */\n  clearCanvas() {\n    const {height, width} = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n  setMaxWidthAndHeight(height: number, width: number) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n  getHitContext(): CanvasRenderingContext2D {\n    const ctx = this.$hitEl.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    const ctx = this.$el.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onHover(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onHoverCB) {\n      this.$el.removeEventListener('mousemove', this.onHoverCB);\n    }\n\n    // Set the callback\n    this.onHoverCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n\n      // Callback should only be called on color change\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('mousemove', this.onHoverCB);\n  }\n\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onClick(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onClickCB) {\n      this.$el.removeEventListener('click', this.onClickCB);\n    }\n\n    // Set the callback\n    this.onClickCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      console.log(pageX, pageY);\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('click', this.onClickCB);\n  }\n}\n\nexport default CanvasComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}