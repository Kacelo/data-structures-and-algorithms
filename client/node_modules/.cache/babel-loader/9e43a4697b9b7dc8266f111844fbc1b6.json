{"ast":null,"code":"import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n/**\n * Describes a node of a binary tree\n */\n\nclass BinaryTreeNode {\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value) {\n    this.value = value;\n    this.nodeCircle = new Circle(`${value}`, theme.radius, getRandomColor());\n  }\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n\n\n  setLeft(value) {\n    this.left = value;\n  }\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n\n\n  setRight(value) {\n    this.right = value;\n  }\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n\n\n  getHeight() {\n    var _a, _b;\n\n    const leftHeight = ((_a = this.left) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n    const rightHeight = ((_b = this.right) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n\n}\n\nexport default BinaryTreeNode;","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA;;;;AAGA,MAAMC,cAAN,CAAoB;EAqBlB;;;;;EAKAC,YAAYC,KAAZ,EAAoB;IAClB,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKC,UAAL,GAAkB,IAAIN,MAAJ,CACd,GAAGK,KAAK,EADM,EAEdJ,KAAK,CAACM,MAFQ,EAGdL,cAAc,EAHA,CAAlB;EAKD;EAED;;;;;;;EAKAM,OAAO,CAACH,KAAD,EAAyB;IAC9B,KAAKI,IAAL,GAAYJ,KAAZ;EACD;EAED;;;;;;;EAKAK,QAAQ,CAACL,KAAD,EAAyB;IAC/B,KAAKM,KAAL,GAAaN,KAAb;EACD;EAED;;;;;;;;EAMAO,SAAS;;;IACP,MAAMC,UAAU,GAAG,YAAKJ,IAAL,MAAS,IAAT,IAASK,aAAT,GAAS,MAAT,GAASA,GAAEF,SAAF,EAAT,KAA0B,CAA7C;IACA,MAAMG,WAAW,GAAG,YAAKJ,KAAL,MAAU,IAAV,IAAUK,aAAV,GAAU,MAAV,GAAUA,GAAEJ,SAAF,EAAV,KAA2B,CAA/C;IACA,OAAOK,IAAI,CAACC,GAAL,CAASL,UAAT,EAAqBE,WAArB,IAAoC,CAA3C;EACD;;AA/DiB;;AAkEpB,eAAeZ,cAAf","names":["Circle","theme","getRandomColor","BinaryTreeNode","constructor","value","nodeCircle","radius","setLeft","left","setRight","right","getHeight","leftHeight","_a","rightHeight","_b","Math","max"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/tree/BinaryTreeNode.ts"],"sourcesContent":["import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n\n/**\n * Describes a node of a binary tree\n */\nclass BinaryTreeNode<T extends string | number> {\n  /**\n   * The value of the node\n   */\n  value: T\n\n  /**\n   * The canvas circle\n   */\n  nodeCircle: Circle\n\n  /**\n   * The left child of the node\n   */\n  left?: BinaryTreeNode<T>\n\n  /**\n   * The right child of the node\n   */\n  right?: BinaryTreeNode<T>\n\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value: T) {\n    this.value = value;\n    this.nodeCircle = new Circle(\n        `${value}`,\n        theme.radius,\n        getRandomColor(),\n    );\n  }\n\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setLeft(value: BinaryTreeNode<T>) {\n    this.left = value;\n  }\n\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setRight(value: BinaryTreeNode<T>) {\n    this.right = value;\n  }\n\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n  getHeight():number {\n    const leftHeight = this.left?.getHeight() || 0;\n    const rightHeight = this.right?.getHeight() || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n}\n\nexport default BinaryTreeNode;\n"]},"metadata":{},"sourceType":"module"}