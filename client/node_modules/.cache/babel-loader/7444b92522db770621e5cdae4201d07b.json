{"ast":null,"code":"import theme from '../config/theme';\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\n\nexport function getMaxLeafNodesFromHeight(treeHeight) {\n  return Math.pow(2, treeHeight - 1);\n}\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\n\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\n\nexport function getXPositionFromGivenHorizontalNodePosition(nodes) {\n  return nodes * theme.leafNodeSpace;\n}\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\n\nexport function getCanvasHeightFromTreeHeight(treeHeight) {\n  return treeHeight * theme.lineHeight;\n}\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\n\nexport function getRequiredAndActualHeightAndWidth(maxNodeSpacing, heightOfTree, maxWidth, maxHeight) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(maxNodeSpacing);\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree + 1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ? maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ? maxCanvasHeightRequired : maxHeight;\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA;;;;;;;AAMA,OAAM,SAAUC,yBAAV,CAAoCC,UAApC,EAAsD;EAC1D,OAAOC,YAAMD,UAAU,GAAC,CAAjB,CAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUE,gCAAV,CAA2CC,QAA3C,EAA2D;EAC/D,OAAO,CAACA,QAAQ,GAAG,CAAZ,IAAiBL,KAAK,CAACM,aAA9B;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,2CAAV,CAAsDC,KAAtD,EAAmE;EACvE,OAAQA,KAAD,GAAUR,KAAK,CAACM,aAAvB;AACD;AAED;;;;;;;AAMA,OAAM,SAAUG,6BAAV,CAAwCP,UAAxC,EAA0D;EAC9D,OAAQA,UAAD,GAAeF,KAAK,CAACU,UAA5B;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,kCAAV,CACFC,cADE,EAEFC,YAFE,EAGFC,QAHE,EAIFC,SAJE,EAIe;EAEnB,MAAMC,sBAAsB,GAAGZ,gCAAgC,CAC3DQ,cAD2D,CAA/D;EAGA,MAAMK,uBAAuB,GAAGR,6BAA6B,CAACI,YAAY,GAAC,CAAd,CAA7D;EACA,MAAMK,cAAc,GAAGF,sBAAsB,GAAGF,QAAzB,GACrBE,sBADqB,GACIF,QAD3B;EAEA,MAAMK,eAAe,GAAGF,uBAAuB,GAAGF,SAA1B,GACtBE,uBADsB,GACIF,SAD5B;EAGA,OAAO;IACLE,uBADK;IAELD,sBAFK;IAGLG,eAHK;IAILD;EAJK,CAAP;AAMD","names":["theme","getMaxLeafNodesFromHeight","treeHeight","Math","getCanvasWidthFromMaxNodeSpacing","maxNodes","leafNodeSpace","getXPositionFromGivenHorizontalNodePosition","nodes","getCanvasHeightFromTreeHeight","lineHeight","getRequiredAndActualHeightAndWidth","maxNodeSpacing","heightOfTree","maxWidth","maxHeight","maxCanvasWidthRequired","maxCanvasHeightRequired","actualMaxWidth","actualMaxHeight"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/utils/tree.ts"],"sourcesContent":["import theme from '../config/theme';\n\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\nexport function getMaxLeafNodesFromHeight(treeHeight: number) {\n  return 2 ** (treeHeight-1);\n}\n\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes: number) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\nexport function getXPositionFromGivenHorizontalNodePosition(nodes: number) {\n  return (nodes) * theme.leafNodeSpace;\n}\n\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\nexport function getCanvasHeightFromTreeHeight(treeHeight: number) {\n  return (treeHeight) * theme.lineHeight;\n}\n\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\nexport function getRequiredAndActualHeightAndWidth(\n    maxNodeSpacing: number,\n    heightOfTree: number,\n    maxWidth: number,\n    maxHeight: number,\n) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(\n      maxNodeSpacing,\n  );\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree+1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ?\n    maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ?\n    maxCanvasHeightRequired : maxHeight;\n\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}