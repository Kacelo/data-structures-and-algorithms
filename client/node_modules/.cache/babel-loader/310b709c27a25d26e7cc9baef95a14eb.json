{"ast":null,"code":"import { VisualizationType } from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport CanvasComponent from './Canvas'; // For keeping track of canvas components for canvas elements\n\nconst canvasMap = new Map();\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\n\nfunction drawBinaryTree(root, canvasElement) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth\n  } = options;\n  const canvasComponent = canvasMap.get(canvasElement) || new CanvasComponent(canvasElement);\n  canvasMap.set(canvasElement, canvasComponent);\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;","map":{"version":3,"mappings":"AACA,SAAQA,iBAAR,QAAgC,6BAAhC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAEA,OAAOC,eAAP,MAA4B,UAA5B,C,CAEA;;AACA,MAAMC,SAAS,GAA4C,IAAIC,GAAJ,EAA3D;AAEA;;;;;;;;AAOA,SAASC,cAAT,CACIC,IADJ,EAEIC,aAFJ,EAG2C;EAAA,IAAvCC,OAAuC,uEAAF,EAAE;EAEzC,MAAM;IACJC,IAAI,GAAGX,iBAAiB,CAACY,MADrB;IAEJC,SAAS,GAAGC,MAAM,CAACC,WAFf;IAGJC,QAAQ,GAAGF,MAAM,CAACG;EAHd,IAIFP,OAJJ;EAMA,MAAMQ,eAAe,GAAGb,SAAS,CAACc,GAAV,CAAcV,aAAd,KACxB,IAAIL,eAAJ,CAAoBK,aAApB,CADA;EAEAJ,SAAS,CAACe,GAAV,CAAcX,aAAd,EAA6BS,eAA7B;;EAEA,QAAQP,IAAR;IACE,KAAKX,iBAAiB,CAACqB,MAAvB;MACEpB,oBAAoB,CAACO,IAAD,EAAOU,eAAP,EAAwB;QAC1CL,SAD0C;QAE1CG;MAF0C,CAAxB,CAApB;MAIA;;IAEF,KAAKhB,iBAAiB,CAACsB,UAAvB;MACEpB,wBAAwB,CAACM,IAAD,EAAOU,eAAP,EAAwB;QAC9CL,SAD8C;QAE9CG;MAF8C,CAAxB,CAAxB;MAIA;;IAEF,KAAKhB,iBAAiB,CAACuB,SAAvB;MACEtB,oBAAoB,CAACO,IAAD,EAAOU,eAAP,EAAwB;QAC1CL,SAD0C;QAE1CG,QAF0C;QAG1CQ,aAAa,EAAE;MAH2B,CAAxB,CAApB;MAKA;;IAEF;MACErB,oBAAoB,CAACK,IAAD,EAAOU,eAAP,EAAwB;QAC1CL,SAD0C;QAE1CG;MAF0C,CAAxB,CAApB;MAIA;EA5BJ;AA8BD;;AAED,eAAeT,cAAf","names":["VisualizationType","drawPrettyBinaryTree","drawExpandableBinaryTree","drawSimpleBinaryTree","CanvasComponent","canvasMap","Map","drawBinaryTree","root","canvasElement","options","type","SIMPLE","maxHeight","window","innerHeight","maxWidth","innerWidth","canvasComponent","get","set","PRETTY","EXPANDABLE","HIGHLIGHT","highlightMode"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/canvas/drawBinaryTree.ts"],"sourcesContent":["import BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {VisualizationType} from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport {MainInputOptions} from './types';\nimport CanvasComponent from './Canvas';\n\n// For keeping track of canvas components for canvas elements\nconst canvasMap: Map<HTMLCanvasElement, CanvasComponent> = new Map();\n\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\nfunction drawBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: Partial<MainInputOptions> = {},\n) {\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth,\n  } = options;\n\n  const canvasComponent = canvasMap.get(canvasElement) ||\n  new CanvasComponent(canvasElement);\n  canvasMap.set(canvasElement, canvasComponent);\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true,\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;\n"]},"metadata":{},"sourceType":"module"}