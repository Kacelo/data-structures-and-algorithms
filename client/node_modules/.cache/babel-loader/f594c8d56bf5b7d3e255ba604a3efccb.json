{"ast":null,"code":"import getRGBString from '../utils/getRGBString';\n/**\n * The gap between 2 ids\n */\n\nconst gap = 10;\n/**\n * For generating color\n */\n\nclass ColorGenerator {\n  constructor() {\n    /**\n     * The red color value\n     */\n    this.red = 0;\n    /**\n     * The green color value\n     */\n\n    this.green = 0;\n    /**\n     * The blue color value\n     */\n\n    this.blue = 1;\n  }\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n\n\n  incrementColor(color) {\n    this[color] = (this[color] + gap) % 256;\n  }\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n\n\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue); // Increment the color\n\n    this.incrementColor('blue');\n\n    if (this.blue < gap) {\n      this.incrementColor('green');\n\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    } // Return the color\n\n\n    return color;\n  }\n\n}\n\nexport default ColorGenerator;","map":{"version":3,"mappings":"AAAA,OAAOA,YAAP,MAAyB,uBAAzB;AAEA;;;;AAGA,MAAMC,GAAG,GAAG,EAAZ;AAEA;;;;AAGA,MAAMC,cAAN,CAAoB;EAApBC;IACE;;;IAGQ,WAAM,CAAN;IAER;;;;IAGQ,aAAQ,CAAR;IAER;;;;IAGQ,YAAO,CAAP;EAiCT;EA/BC;;;;;;;EAKAC,cAAc,CAACC,KAAD,EAAgC;IAC5C,KAAKA,KAAL,IAAc,CAAC,KAAKA,KAAL,IAAcJ,GAAf,IAAsB,GAApC;EACD;EAED;;;;;;;;EAMAK,YAAY;IACV;IACA,MAAMD,KAAK,GAAGL,YAAY,CAAC,KAAKO,GAAN,EAAW,KAAKC,KAAhB,EAAuB,KAAKC,IAA5B,CAA1B,CAFU,CAIV;;IACA,KAAKL,cAAL,CAAoB,MAApB;;IACA,IAAI,KAAKK,IAAL,GAAYR,GAAhB,EAAqB;MACnB,KAAKG,cAAL,CAAoB,OAApB;;MACA,IAAI,KAAKI,KAAL,GAAaP,GAAjB,EAAsB;QACpB,KAAKG,cAAL,CAAoB,KAApB;MACD;IACF,CAXS,CAaV;;;IACA,OAAOC,KAAP;EACD;;AA9CiB;;AAiDpB,eAAeH,cAAf","names":["getRGBString","gap","ColorGenerator","constructor","incrementColor","color","getNextColor","red","green","blue"],"sources":["/home/denilson/node_modules/binary-tree-visualizer/src/helpers/ColorGenerator.ts"],"sourcesContent":["import getRGBString from '../utils/getRGBString';\n\n/**\n * The gap between 2 ids\n */\nconst gap = 10;\n\n/**\n * For generating color\n */\nclass ColorGenerator {\n  /**\n   * The red color value\n   */\n  private red = 0\n\n  /**\n   * The green color value\n   */\n  private green = 0\n\n  /**\n   * The blue color value\n   */\n  private blue = 1\n\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n  incrementColor(color: 'red' | 'green' | 'blue') {\n    this[color] = (this[color] + gap) % 256;\n  }\n\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue);\n\n    // Increment the color\n    this.incrementColor('blue');\n    if (this.blue < gap) {\n      this.incrementColor('green');\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    }\n\n    // Return the color\n    return color;\n  }\n}\n\nexport default ColorGenerator;\n"]},"metadata":{},"sourceType":"module"}